import { ElevenLabsClient } from "elevenlabs";
import ffmpeg from "fluent-ffmpeg";
import ffmpegPath from "ffmpeg-static";
import path from "path";
import fs from "fs";
import Bottleneck from "bottleneck";

ffmpeg.setFfmpegPath(ffmpegPath!);

const elevenlabs = new ElevenLabsClient({
    apiKey: process.env.ELEVENLABS_API_KEY,
  });

// 2 is the free tier. See https://help.elevenlabs.io/hc/en-us/articles/19571824571921-API-Error-Code-429
const maxElevenlabsConcurrency = 2;

const limiter = new Bottleneck({
    maxConcurrent: maxElevenlabsConcurrency,
    // minTime: 100      // Minimum time between each execution (ms)
  });

// TODO save as 6chars.wav, and other specs: https://manual.edgetx.org/color-radios/radio-settings/sd-card#sounds
// File Name: 123456.wav (up to 6 characters plus .wav)
// Sample Rate: 32 kHz (or 16 Khz, 8Khz)
// Bits / Sample: 16 (or 8)
// Tracks: 1, mono
// Compression Codec: PCM
// Max 799 files

type SpeechTextByFilename = Record<string, string>; 

// Tried Jessica, David and "Russo - Dramatic Australian TV"
const elevenlabsVoice = "Russo - Dramatic Australian TV";

const ardupilotSpeechTextByFilename: SpeechTextByFilename = {
  // "armed": "Armed",
  //   "disarm": "Disarmed",
  // // Modes
  //   "acro": "Acro",
  //   "airmod": "Air mode",
  //   "althld": "Altitude hold",
  //   "auto": "Auto",
  //   "autotn": "Auto Tune",
  //   "brake": "Brake",
  //   "circle": "Circle",
  //   "drift": "Drift",
  //   "flip": "Flip",
  //   "flhld": "FlowHold",
  //   "follow": "Follow",
  //   "guided": "Guided",
  //   "helrt": "Heli Autorotate",
  //   "land": "Land",
  //   "loiter": "Loiter",
  //   "poshld": "PosHold",
  //   "rtl": "Return to launch",
  //   "simple": "Simple",
  //   "smartl": "SmartRTL",
  //   "sport": "Sport",
  //   "stab": "Stabilize",
  //   "sysid": "Sys ID",
  //   "throw": "Throw",
  //   "turtle": "Turtle",
  //   "zigzag": "ZigZag",
  //   // Plane modes
  //   "manua": "Manual",
  //   "fbwa": "Fly by wire A",
  //   "fbwb": "Fly by wire B",
  //   "cruise": "Cruise",
  //   "train": "Training",
  //   "takeof": "Take-off",
  //   "therma": "Thermal",
  //   // Quadplane modes
  //   "qstab": "Q-stabilize",
  //   "qhover": "Q-hover",
  //   "qloite": "Q-loiter",
  //   "qland": "Q land",
  //   "qrtl": "Q-return to launch",
  //   "qautn": "Q-auto tune",
  //   "qacro": "Q-acro",
  //   "laqlan": "Loiter to altitude and q-land"
}

Object.keys(ardupilotSpeechTextByFilename).forEach(key => {
    if (key.length > 6) {
        throw new Error("Key " + key + " is too long");
    }
});

const soundOutputDirectory = path.join(__dirname, `./sounds/${elevenlabsVoice}`);
const mp3OutputDirectory = path.join(soundOutputDirectory, "./mp3/");
const wavOutputDirectory = path.join(soundOutputDirectory, "./wav/");
fs.mkdirSync(wavOutputDirectory, { recursive: true });

const generateAndWriteWavForKey = async (key: string) => {
// > If you are a developer utilizing our API, any endpoints that provide audio responses will return bytes for an MP3 file. https://help.elevenlabs.io/hc/en-us/articles/15754340124305-What-audio-formats-do-you-support
console.log("Generating audio for " + key + " using voice " + elevenlabsVoice);
const audio = await elevenlabs.generate({
    voice: elevenlabsVoice,
    text: ardupilotSpeechTextByFilename[key],
    model_id: "eleven_turbo_v2"
  });

  
  const mp3OutputPath = path.join(mp3OutputDirectory + key + ".mp3");
  const wavOutputPath = path.join(wavOutputDirectory + key + ".wav");
  const response = new Response(audio as unknown as ReadableStream);
  const buffer = new Uint8Array(await response.arrayBuffer());
  await Bun.write(mp3OutputPath, buffer);
  
  // doesn't work in bun...
  // play(audio);
ffmpeg(mp3OutputPath)
  .outputOptions(["-acodec", "pcm_s16le", "-ar", "16000", "-ac", "1"])
  .save(wavOutputPath);

// Wants samples, not an mp3 buffer:
// const wav = new WaveFile();
// wav.fromScratch(1, 16000, "16", buffer);
// wav.setTag("Title", outputFilename);
// wav.setTag("Comment", `Generated by Ben Butterworth using Elevenlabs's AI voice called ${elevenlabsVoice}`);
// await Bun.write(wavOutputPath, wav.toBuffer());
};

// Debugger doesn't work in bun...

const generateAndWriteWavForKeys = async () => {
    const keys = Object.keys(ardupilotSpeechTextByFilename);
    
    const promises = keys.map(key => limiter.schedule(() => generateAndWriteWavForKey(key)));
  
    await Promise.all(promises);
    // console.log(results);
  };
  
  generateAndWriteWavForKeys();